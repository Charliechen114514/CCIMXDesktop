#ifndef DESKTOPMAINWINDOW_H
#define DESKTOPMAINWINDOW_H

#include "builtin/window/settings_window/cores/SettingsPack.h"
#include "library/simple_gerseter/simple_getseter.hpp"
#include "ui/appwidget.h"
#include <QMainWindow>
QT_BEGIN_NAMESPACE
namespace Ui {
class DesktopMainWindow;
}
QT_END_NAMESPACE

class HomePage;
class DesktopDirentLocationManager;
class QGridLayout;
class DesktopToast;
class ApplicationWrapper;
class QStackedWidget;
class DownDockWidget;
class AppCardWidget;
class WallPaperEngine;
class SettingsWindow;
class ApplicationLauncherMainWindow;
class AppWidgetsSettingsInfoPack;
class NetAbilityScanner;
class GlobalClockSources;
class TopSideBarWidget;
class DesktopServerBase;
class DesktopServerHookBase;
class DesktopUserInfo;
class FastSettingsWidget;
class MouseManager;
class CCIMX_DesktopSplashWindow;
/**
 * @brief DesktopMainWindow is the main frontend window of the application.
 * For beginners, this is the starting point to understand the UI details.
 */
class DesktopMainWindow : public QMainWindow {
    Q_OBJECT

public:
    friend class PageFactory;
    friend class WallPaperEngine;
    friend class DesktopMainWindowInitHelper;
	/**
	 * @brief Construct a new Desktop Main Window object
     *
     * @param parent
	 */
    explicit DesktopMainWindow(QWidget* parent = nullptr);
	/**
	 * @brief Destroy the Desktop Main Window object
     *
     */
    ~DesktopMainWindow();

    /* simple property getset */
    __PROPERTY_GETSET(int, slide_limitive); ///< slider property setter

    /**
     * @brief init init the windows sessions
	 */
    void init(CCIMX_DesktopSplashWindow* splash);

    /**
     * @brief Show a toast message on the main window
     * @param message Message to display
     */
    void showToast(const QString& message);

    /**
     * @brief Get pointer to DesktopToast handler
     * @return DesktopToast instance
     */
    DesktopToast* desktop_toast() const { return toast; }

    /**
     * @brief queryWallpaperEngine
     * @return WallPaperEngine instances
     */
    WallPaperEngine* queryWallpaperEngine() { return wallpaper_engine; }

    /**
     * @brief Get the global DownDockWidget instance
     * @return DownDockWidget instance
     */
    DownDockWidget* downDockWidget() const;

    /**
     * @brief Install a remote application wrapper
     * @param wrapper Pointer to ApplicationWrapper to install
     */
    void install_remote_appwrapper(ApplicationWrapper* wrapper) { app_wrapper << wrapper; }

    /**
     * @brief Get the QStackedWidget used for page sliding
     * @return QStackedWidget pointer
     */
    QStackedWidget* stackedWidget() const;

    /**
     * @brief netAbilityScanner get the netScanner
     * @return
     */
    NetAbilityScanner* netAbilityScanner() const { return scanner; }

    /**
     * @brief clock_src clock src fetcher
     * @return
     */
    GlobalClockSources* clock_src() const { return clock; }

    /**
     * @brief topSideBar fetcher
     * @return
     */
    TopSideBarWidget* topSideBar() const;

    /**
     * @brief Perform initialization after main window is shown
     */
    void post_show();

signals:
    /**
     * @brief updateProgress
     * @param message
     * @param processings
     */
    void updateProgress(const QString& message, const int processings);

public slots:
    /**
     * @brief back_home_page this api is about to lead
     * the desktop to the homepage :)
     */
    void back_home_page();

    /**
     * @brief Slide to the next page in UI
     */
    void to_next_page();

    /**
     * @brief Slide to the previous page in UI
     */
    void to_prev_page();
    /**
     * @brief Handle status changes of applications (like errors)
     * @param status Current app status
     */
    void handle_app_status(AppWidget::AppStatus status);

    /**
     * @brief open_settings_window catches the signals of open_settings
     */
    void open_settings_window();

    /**
     * @brief open_launch_window
     */
    void open_launch_window();

    /**
     * @brief install_for_new_dynamicpage
     * for the persistance apps of new
     */
    void install_for_new_dynamicpage(AppWidget* appWidgets);

    /**
     * @brief process_set_appwidgets_config
     * @param info infos
     */
    void process_set_appwidgets_config(const AppWidgetsSettingsInfoPack& info);

    /**
     * @brief process_wallpaper_settings
     * @param settings packages
     */
    void process_wallpaper_settings(BaseWallPaperSettings* settings);

protected:
	/**
	 * @brief mouse press sessions
     *
     * @param event
	 */
    void mousePressEvent(QMouseEvent* event) override;
    /**
	 * @brief mouse release sessions
     *
     * @param event
	 */
    void mouseReleaseEvent(QMouseEvent* event) override;
    /**
	 * @brief resize sessions
     *
     * @param event
	 */
    void resizeEvent(QResizeEvent* event) override;

private:
    Ui::DesktopMainWindow* ui; ///< UI pointer generated by Qt Designer
    DesktopToast* toast; ///< Toast message widget
    QList<ApplicationWrapper*> app_wrapper; ///< List of application wrappers
    QList<AppWidget*> app_widgets; ///< List of app widgets
    QList<DesktopServerBase*> servers; ///< servers
    QList<DesktopServerHookBase*> hooks; ///< server hooks;
    DesktopDirentLocationManager* locationManager; ///< locationManager
    DesktopUserInfo* user_info; ///< user info
    std::shared_ptr<MouseManager> mouseManager; ///< managing mouse sessions
    QList<AppCardWidget*> app_cards; ///< List of application card widgets
    WallPaperEngine* wallpaper_engine; ///< wallpaper handler
    ApplicationLauncherMainWindow* appLauncherWindow; ///< windows for the application launch!
    SettingsWindow* settingsWindow; ///< windows contains settings
    NetAbilityScanner* scanner; ///< scanner for the network sessions
    GlobalClockSources* clock; ///< clock src
    HomePage* homePage; ///< homePage
    FastSettingsWidget* fastSettingsWidget; ///< fast settings widgets
    int slide_limitive; ///< slide limitives
    int tool_settings_bar_slide_limitive; ///< for the settings of slide
    /**
     * @brief staic UI setup for ui->setupUi()
     */
    void setup_static_ui();

    /**
     * @brief Setup default dock widgets with pre-installed apps
     */
    void setup_default_dock();

    /**
     * @brief Trigger initialization of app cards (usually connected to signal deptach_app_cards_init)
     */
    void invoke_appcards_init();
    /**
     * @brief centralWidget get the centralWidget for WallPaperEngine
     */
    QWidget* centralWidget();

    /**
     * @brief initLogger init the logger level of early stage console
     */
    void initLogger();

    /**
     * @brief get_user_info
     * @return
     */
    DesktopUserInfo* get_user_info();
};

#endif // DESKTOPMAINWINDOW_H
