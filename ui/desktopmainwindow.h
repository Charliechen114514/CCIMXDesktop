#ifndef DESKTOPMAINWINDOW_H
#define DESKTOPMAINWINDOW_H

#include "app_wrapper/applicationwrapper.h"
#include "ui/appwidget.h"
#include <QMainWindow>

QT_BEGIN_NAMESPACE
namespace Ui {
class DesktopMainWindow;
}
QT_END_NAMESPACE

class QGridLayout;
class QLabel;
class DesktopToast;
class ApplicationWrapper;
class QTimer;
class QStackedWidget;
class DownDockWidget;
class AppCardWidget;

/**
 * @brief DesktopMainWindow is the main frontend window of the application.
 * For beginners, this is the starting point to understand the UI details.
 */
class DesktopMainWindow : public QMainWindow {
    Q_OBJECT

public:
    friend class PageFactory;

    /**
     * @brief WallPaperGroup manages wallpaper-related widgets and timers.
     */
    struct WallPaperGroup {
        QWidget* shoule_be_lower; ///< Widget that should be placed behind animations, typically the central widget
        QLabel* wallpaperLabel { nullptr }; ///< Displays current wallpaper
        QLabel* bufferpaperLabel { nullptr }; ///< Used for animation buffering
        QTimer* invoke_switch_timer; ///< Timer to control wallpaper switching intervals
    };

	/**
	 * @brief Construct a new Desktop Main Window object
	 * 
	 * @param parent 
	 */
    explicit DesktopMainWindow(QWidget* parent = nullptr);
	/**
	 * @brief Destroy the Desktop Main Window object
	 * 
	 */
    ~DesktopMainWindow();

    /**
     * @brief Show a toast message on the main window
     * @param message Message to display
     */
    void showToast(const QString& message);

    /**
     * @brief Get pointer to DesktopToast handler
     * @return DesktopToast instance
     */
    DesktopToast* desktop_toast() const { return toast; }

    /**
     * @brief Get the global DownDockWidget instance
     * @return DownDockWidget instance
     */
    DownDockWidget* downDockWidget() const;

    /**
     * @brief Slide to the next page in UI
     */
    void to_next_page();

    /**
     * @brief Slide to the previous page in UI
     */
    void to_prev_page();

    /**
     * @brief Trigger wallpaper page switch session
     */
    void invoke_switch_bgpage();

    /**
     * @brief Install a remote application wrapper
     * @param wrapper Pointer to ApplicationWrapper to install
     */
    void install_remote_appwrapper(ApplicationWrapper* wrapper) { app_wrapper << wrapper; }

    /**
     * @brief Get the QStackedWidget used for page sliding
     * @return QStackedWidget pointer
     */
    QStackedWidget* stackedWidget() const;

    /**
     * @brief Perform initialization after main window is shown
     */
    void post_show();

public slots:
    /**
     * @brief Handle status changes of applications (like errors)
     * @param status Current app status
     */
    void handle_app_status(AppWidget::AppStatus status);

signals:
    /**
     * @brief Signal emitted when app cards require initialization
     */
    void deptach_app_cards_init();

protected:
	/**
	 * @brief mouse press sessions
	 * 
	 * @param event 
	 */
    void mousePressEvent(QMouseEvent* event) override;
		/**
	 * @brief mouse release sessions
	 * 
	 * @param event 
	 */
    void mouseReleaseEvent(QMouseEvent* event) override;
		/**
	 * @brief resize sessions
	 * 
	 * @param event 
	 */
    void resizeEvent(QResizeEvent* event) override;

private:
    Ui::DesktopMainWindow* ui; ///< UI pointer generated by Qt Designer
    DesktopToast* toast; ///< Toast message widget
    QList<ApplicationWrapper*> app_wrapper; ///< List of application wrappers
    QList<AppWidget*> app_widgets; ///< List of app widgets

    WallPaperGroup wallPaperGroup; ///< Wallpaper management group
    QStringList image_lists; ///< List of wallpaper image paths

    struct {
        QPoint press; ///< Mouse press position
        QPoint release; ///< Mouse release position
    } records; ///< Used for swipe gesture detection

    static constexpr const unsigned int switch_bg_time = 20000; ///< Wallpaper switch interval in ms

    QList<AppCardWidget*> app_cards; ///< List of application card widgets

    /**
     * @brief Additional UI setup after ui->setupUi()
     */
    void post_setupui();

    /**
     * @brief Setup wallpaper background images
     */
    void setup_bg_image();

    /**
     * @brief Setup default and internal applications
     */
    void setup_apps();

    /**
     * @brief Setup default dock widgets with pre-installed apps
     */
    void setup_default_dock();

    /**
     * @brief Trigger initialization of app cards (usually connected to signal deptach_app_cards_init)
     */
    void invoke_appcards_init();
};

#endif // DESKTOPMAINWINDOW_H
