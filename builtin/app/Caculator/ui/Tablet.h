#ifndef TABLET_H
#define TABLET_H

#include <QWidget>

namespace Ui {
class Tablet;
}

/**
 * @brief The Tablet class provides a user interface panel for building
 *        and evaluating string-based expressions interactively.
 *
 * This widget allows appending tokens, clearing input, and evaluating
 * mathematical or textual expressions via UI interaction.
 */
class Tablet : public QWidget {
    Q_OBJECT

public:
    /**
     * @brief Constructs the Tablet widget.
     * @param parent The parent QWidget, if any.
     */
    explicit Tablet(QWidget* parent = nullptr);

    /**
     * @brief Destructor.
     */
    ~Tablet();

public slots:
    /**
     * @brief Sets the result text shown in the result display area.
     * @param v The result string to display.
     */
    void setResult(const QString& v);

    /**
     * @brief Appends an external string token to the internal expression.
     * @param what The token to append.
     */
    void append_outlayer(const QString& what);

    /**
     * @brief Clears the internal expression and updates the UI.
     */
    void process_clear();

    /**
     * @brief Removes the last character or token from the expression.
     */
    void process_chop();

    /**
     * @brief Evaluates the current expression and updates the result.
     */
    void process_evaluate();

private slots:
    /**
     * @brief Handles user input from the text field and appends to the expression.
     *
     * This slot is typically connected to a returnPressed() signal or a button.
     */
    void process_text_according();

private:
    /**
     * @brief Initializes the UI and sets up signal-slot connections.
     */
    void setup_panel();

    /**
     * @brief Pointer to the UI elements generated by Qt Designer.
     */
    Ui::Tablet* ui;

    /**
     * @brief Holds the current string-based expression being constructed.
     */
    QString string_expression;
};

#endif // TABLET_H
