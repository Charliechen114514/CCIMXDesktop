#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "mupdf_adapter/ccpdfdocument.h"
#include "mupdf_tools/ccpdfnavigationpolicy.h"
#include <QMainWindow>

class MetaInfoWindow;
class QLabel;
class CCPdfViewer;
class ToolsSideBar;

QT_BEGIN_NAMESPACE
namespace Ui {
class MainWindow;
}
QT_END_NAMESPACE

/// @class MainWindow
/// @brief The main application window for PDF viewing and interaction.
class MainWindow : public QMainWindow {
	Q_OBJECT

public:
	/**
	 * @brief Constructs the main window and initializes the UI.
	 * @param parent The parent widget.
	 */
	MainWindow(QWidget* parent = nullptr);

	/// @brief Destructor to clean up resources.
	~MainWindow();

public slots:
	/// @brief Opens a PDF document using a file dialog.
	void open_documentFromDialog();

	/// @brief Opens a window to browse document meta information.
	void browse_document_metas();

	/// @brief Jumps to the specified page index.
	/// @param page_index The target page to jump to.
	void jump_to_page(const int page_index);

	/// @brief Navigates to the previous page.
	void prev_page(void);

	/// @brief Navigates to the next page.
	void next_page(void);

	/// @brief Toggles the visibility of the toolbox sidebar.
	void switch_toolbox_state(void);

	/// @brief Zooms into the current PDF view.
	void zoom_in(void);

	/// @brief Zooms out of the current PDF view.
	void zoom_out(void);

private:
	Ui::MainWindow* ui; ///< Pointer to the UI layout generated by Qt Designer.
	QLabel* page_navigation_indicator_label; ///< Label for displaying page number or navigation info.

	std::unique_ptr<CCPdfDocument> document_holders; ///< Managed pointer to the currently loaded PDF document.
	std::shared_ptr<MetaInfoWindow> metainfo_window; ///< Shared pointer to the window showing metadata.
	CCPdfViewer* pdfdisplay_view; ///< The central PDF viewer widget.
	ToolsSideBar* tools_side_bar; ///< Sidebar widget with additional tools.
	CCPdfNavigationPolicy policy; ///< Navigation policy for page transitions and errors.

	/// @brief Sets up internal signal-slot connections.
	void setup_connections();

	/// @brief Initializes UI elements after construction.
	void post_init_ui();

	/**
	 * @brief Updates navigation-related UI components.
	 *
	 * Should be used when page index or document changes.
	 */
	void update_page_navigations_ui();

	/**
	 * @brief Updates the entire UI based on current document state.
	 *
	 * This is a heavy operation, should be used cautiously.
	 */
	void update_ui_globally();

	/// @brief Initializes the document only once after it is loaded.
	void init_once_pdfdoc(void);
};

#endif // MAINWINDOW_H
